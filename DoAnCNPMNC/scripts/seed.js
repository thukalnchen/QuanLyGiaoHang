const { User, ServiceType, Pricing, Order, sequelize } = require('../models');

const seedData = async () => {
    try {
        console.log('üå± Starting database seeding...');

        // Create users
        const users = await User.bulkCreate([
            {
                username: 'admin',
                email: 'admin@company.com',
                password: 'admin123',
                fullName: 'Administrator',
                phone: '0123456789',
                role: 'admin',
                isActive: true
            },
            {
                username: 'staff1',
                email: 'staff1@company.com',
                password: 'staff123',
                fullName: 'Nguy·ªÖn VƒÉn Staff',
                phone: '0123456790',
                role: 'staff',
                isActive: true
            },
            {
                username: 'staff2',
                email: 'staff2@company.com',
                password: 'staff123',
                fullName: 'Tr·∫ßn Th·ªã Staff',
                phone: '0123456791',
                role: 'staff',
                isActive: true
            },
            {
                username: 'shipper1',
                email: 'shipper1@company.com',
                password: 'shipper123',
                fullName: 'L√™ VƒÉn Shipper',
                phone: '0123456792',
                role: 'shipper',
                isActive: true
            },
            {
                username: 'shipper2',
                email: 'shipper2@company.com',
                password: 'shipper123',
                fullName: 'Ph·∫°m Th·ªã Shipper',
                phone: '0123456793',
                role: 'shipper',
                isActive: true
            }
        ]);

        console.log('‚úÖ Users created:', users.length);

        // Create service types
        const serviceTypes = await ServiceType.bulkCreate([
            {
                name: 'Giao h√†ng ti√™u chu·∫©n',
                description: 'D·ªãch v·ª• giao h√†ng ti√™u chu·∫©n trong th√†nh ph·ªë',
                isActive: true
            },
            {
                name: 'Giao h√†ng nhanh',
                description: 'D·ªãch v·ª• giao h√†ng nhanh trong ng√†y',
                isActive: true
            },
            {
                name: 'Giao h√†ng li√™n t·ªânh',
                description: 'D·ªãch v·ª• giao h√†ng gi·ªØa c√°c t·ªânh th√†nh',
                isActive: true
            },
            {
                name: 'Giao h√†ng qu·ªëc t·∫ø',
                description: 'D·ªãch v·ª• giao h√†ng qu·ªëc t·∫ø',
                isActive: true
            }
        ]);

        console.log('‚úÖ Service types created:', serviceTypes.length);

        // Create pricing rules
        const pricingRules = await Pricing.bulkCreate([
            // Standard delivery pricing
            {
                serviceTypeId: serviceTypes[0].id,
                weightFrom: 0,
                weightTo: 1,
                price: 15000,
                fragilePrice: 5000,
                valuablePrice: 10000,
                isActive: true
            },
            {
                serviceTypeId: serviceTypes[0].id,
                weightFrom: 1,
                weightTo: 5,
                price: 12000,
                fragilePrice: 5000,
                valuablePrice: 10000,
                isActive: true
            },
            {
                serviceTypeId: serviceTypes[0].id,
                weightFrom: 5,
                weightTo: 10,
                price: 10000,
                fragilePrice: 5000,
                valuablePrice: 10000,
                isActive: true
            },
            {
                serviceTypeId: serviceTypes[0].id,
                weightFrom: 10,
                weightTo: 50,
                price: 8000,
                fragilePrice: 5000,
                valuablePrice: 10000,
                isActive: true
            },

            // Fast delivery pricing
            {
                serviceTypeId: serviceTypes[1].id,
                weightFrom: 0,
                weightTo: 1,
                price: 25000,
                fragilePrice: 8000,
                valuablePrice: 15000,
                isActive: true
            },
            {
                serviceTypeId: serviceTypes[1].id,
                weightFrom: 1,
                weightTo: 5,
                price: 20000,
                fragilePrice: 8000,
                valuablePrice: 15000,
                isActive: true
            },
            {
                serviceTypeId: serviceTypes[1].id,
                weightFrom: 5,
                weightTo: 10,
                price: 18000,
                fragilePrice: 8000,
                valuablePrice: 15000,
                isActive: true
            },

            // Inter-province delivery pricing
            {
                serviceTypeId: serviceTypes[2].id,
                weightFrom: 0,
                weightTo: 1,
                price: 30000,
                fragilePrice: 10000,
                valuablePrice: 20000,
                isActive: true
            },
            {
                serviceTypeId: serviceTypes[2].id,
                weightFrom: 1,
                weightTo: 5,
                price: 25000,
                fragilePrice: 10000,
                valuablePrice: 20000,
                isActive: true
            },
            {
                serviceTypeId: serviceTypes[2].id,
                weightFrom: 5,
                weightTo: 10,
                price: 20000,
                fragilePrice: 10000,
                valuablePrice: 20000,
                isActive: true
            },
            {
                serviceTypeId: serviceTypes[2].id,
                weightFrom: 10,
                weightTo: 50,
                price: 15000,
                fragilePrice: 10000,
                valuablePrice: 20000,
                isActive: true
            },

            // International delivery pricing
            {
                serviceTypeId: serviceTypes[3].id,
                weightFrom: 0,
                weightTo: 1,
                price: 500000,
                fragilePrice: 50000,
                valuablePrice: 100000,
                isActive: true
            },
            {
                serviceTypeId: serviceTypes[3].id,
                weightFrom: 1,
                weightTo: 5,
                price: 400000,
                fragilePrice: 50000,
                valuablePrice: 100000,
                isActive: true
            },
            {
                serviceTypeId: serviceTypes[3].id,
                weightFrom: 5,
                weightTo: 10,
                price: 350000,
                fragilePrice: 50000,
                valuablePrice: 100000,
                isActive: true
            }
        ]);

        console.log('‚úÖ Pricing rules created:', pricingRules.length);

        // Create sample orders
        const orders = await Order.bulkCreate([
            {
                orderCode: 'ORD001001',
                senderName: 'Nguy·ªÖn VƒÉn A',
                senderPhone: '0123456789',
                senderAddress: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM',
                receiverName: 'Tr·∫ßn Th·ªã B',
                receiverPhone: '0987654321',
                receiverAddress: '456 ƒê∆∞·ªùng XYZ, Qu·∫≠n 2, TP.HCM',
                serviceTypeId: serviceTypes[0].id,
                weight: 2.5,
                isFragile: false,
                isValuable: false,
                totalAmount: 30000,
                status: 'delivered',
                notes: 'Giao h√†ng th√†nh c√¥ng',
                createdBy: users[1].id
            },
            {
                orderCode: 'ORD001002',
                senderName: 'L√™ VƒÉn C',
                senderPhone: '0123456790',
                senderAddress: '789 ƒê∆∞·ªùng DEF, Qu·∫≠n 3, TP.HCM',
                receiverName: 'Ph·∫°m Th·ªã D',
                receiverPhone: '0987654322',
                receiverAddress: '321 ƒê∆∞·ªùng GHI, Qu·∫≠n 4, TP.HCM',
                serviceTypeId: serviceTypes[1].id,
                weight: 1.2,
                isFragile: true,
                isValuable: false,
                totalAmount: 38000,
                status: 'shipping',
                notes: 'H√†ng d·ªÖ v·ª°, c·∫ßn c·∫©n th·∫≠n',
                createdBy: users[1].id
            },
            {
                orderCode: 'ORD001003',
                senderName: 'Ho√†ng VƒÉn E',
                senderPhone: '0123456791',
                senderAddress: '654 ƒê∆∞·ªùng JKL, Qu·∫≠n 5, TP.HCM',
                receiverName: 'V≈© Th·ªã F',
                receiverPhone: '0987654323',
                receiverAddress: '987 ƒê∆∞·ªùng MNO, Qu·∫≠n 6, TP.HCM',
                serviceTypeId: serviceTypes[0].id,
                weight: 8.5,
                isFragile: false,
                isValuable: true,
                totalAmount: 95000,
                status: 'processing',
                notes: 'H√†ng gi√° tr·ªã cao',
                createdBy: users[2].id
            },
            {
                orderCode: 'ORD001004',
                senderName: 'ƒê·∫∑ng VƒÉn G',
                senderPhone: '0123456792',
                senderAddress: '147 ƒê∆∞·ªùng PQR, Qu·∫≠n 7, TP.HCM',
                receiverName: 'B√πi Th·ªã H',
                receiverPhone: '0987654324',
                receiverAddress: '258 ƒê∆∞·ªùng STU, Qu·∫≠n 8, TP.HCM',
                serviceTypeId: serviceTypes[2].id,
                weight: 3.8,
                isFragile: true,
                isValuable: true,
                totalAmount: 125000,
                status: 'pending',
                notes: 'Giao h√†ng li√™n t·ªânh',
                createdBy: users[1].id
            },
            {
                orderCode: 'ORD001005',
                senderName: 'Phan VƒÉn I',
                senderPhone: '0123456793',
                senderAddress: '369 ƒê∆∞·ªùng VWX, Qu·∫≠n 9, TP.HCM',
                receiverName: 'Ng√¥ Th·ªã K',
                receiverPhone: '0987654325',
                receiverAddress: '741 ƒê∆∞·ªùng YZA, Qu·∫≠n 10, TP.HCM',
                serviceTypeId: serviceTypes[0].id,
                weight: 0.8,
                isFragile: false,
                isValuable: false,
                totalAmount: 12000,
                status: 'cancelled',
                notes: 'Kh√°ch h√†ng h·ªßy ƒë∆°n',
                createdBy: users[2].id
            },
            {
                orderCode: 'ORD001006',
                senderName: 'V√µ VƒÉn L',
                senderPhone: '0123456794',
                senderAddress: '852 ƒê∆∞·ªùng BCD, Qu·∫≠n 11, TP.HCM',
                receiverName: 'ƒêinh Th·ªã M',
                receiverPhone: '0987654326',
                receiverAddress: '963 ƒê∆∞·ªùng EFG, Qu·∫≠n 12, TP.HCM',
                serviceTypeId: serviceTypes[1].id,
                weight: 2.1,
                isFragile: false,
                isValuable: false,
                totalAmount: 42000,
                status: 'delivered',
                notes: 'Giao h√†ng nhanh th√†nh c√¥ng',
                createdBy: users[1].id
            },
            {
                orderCode: 'ORD001007',
                senderName: 'Tr∆∞∆°ng VƒÉn N',
                senderPhone: '0123456795',
                senderAddress: '159 ƒê∆∞·ªùng HIJ, Qu·∫≠n B√¨nh Th·∫°nh, TP.HCM',
                receiverName: 'L√Ω Th·ªã O',
                receiverPhone: '0987654327',
                receiverAddress: '357 ƒê∆∞·ªùng KLM, Qu·∫≠n T√¢n B√¨nh, TP.HCM',
                serviceTypeId: serviceTypes[2].id,
                weight: 6.2,
                isFragile: false,
                isValuable: false,
                totalAmount: 124000,
                status: 'shipping',
                notes: 'ƒêang giao h√†ng li√™n t·ªânh',
                createdBy: users[2].id
            },
            {
                orderCode: 'ORD001008',
                senderName: 'H·ªì VƒÉn P',
                senderPhone: '0123456796',
                senderAddress: '753 ƒê∆∞·ªùng NOP, Qu·∫≠n Ph√∫ Nhu·∫≠n, TP.HCM',
                receiverName: 'T√¥n Th·ªã Q',
                receiverPhone: '0987654328',
                receiverAddress: '951 ƒê∆∞·ªùng QRS, Qu·∫≠n Th·ªß ƒê·ª©c, TP.HCM',
                serviceTypeId: serviceTypes[0].id,
                weight: 4.7,
                isFragile: true,
                isValuable: false,
                totalAmount: 61000,
                status: 'processing',
                notes: 'Chu·∫©n b·ªã giao h√†ng',
                createdBy: users[1].id
            },
            {
                orderCode: 'ORD001009',
                senderName: 'Cao VƒÉn R',
                senderPhone: '0123456797',
                senderAddress: '246 ƒê∆∞·ªùng TUV, Qu·∫≠n G√≤ V·∫•p, TP.HCM',
                receiverName: 'L√¢m Th·ªã S',
                receiverPhone: '0987654329',
                receiverAddress: '468 ƒê∆∞·ªùng WXY, Qu·∫≠n B√¨nh T√¢n, TP.HCM',
                serviceTypeId: serviceTypes[3].id,
                weight: 0.5,
                isFragile: false,
                isValuable: true,
                totalAmount: 600000,
                status: 'pending',
                notes: 'Giao h√†ng qu·ªëc t·∫ø',
                createdBy: users[0].id
            },
            {
                orderCode: 'ORD001010',
                senderName: 'D∆∞∆°ng VƒÉn T',
                senderPhone: '0123456798',
                senderAddress: '135 ƒê∆∞·ªùng ZAB, Qu·∫≠n T√¢n Ph√∫, TP.HCM',
                receiverName: 'Chu Th·ªã U',
                receiverPhone: '0987654330',
                receiverAddress: '579 ƒê∆∞·ªùng CDE, Qu·∫≠n H√≥c M√¥n, TP.HCM',
                serviceTypeId: serviceTypes[1].id,
                weight: 1.8,
                isFragile: false,
                isValuable: false,
                totalAmount: 36000,
                status: 'delivered',
                notes: 'Giao h√†ng nhanh ho√†n th√†nh',
                createdBy: users[2].id
            }
        ]);

        console.log('‚úÖ Sample orders created:', orders.length);

        console.log('üéâ Database seeding completed successfully!');
        console.log('\nüìã Sample accounts:');
        console.log('Admin: admin / admin123');
        console.log('Staff: staff1 / staff123');
        console.log('Shipper: shipper1 / shipper123');
        console.log('\nüöÄ You can now start the application with: npm start');

    } catch (error) {
        console.error('‚ùå Seeding failed:', error);
        throw error;
    }
};

// Run seeding if this file is executed directly
if (require.main === module) {
    seedData()
        .then(() => {
            console.log('‚úÖ Seeding completed');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå Seeding failed:', error);
            process.exit(1);
        });
}

module.exports = seedData;
